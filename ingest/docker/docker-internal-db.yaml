version: '3.8'

services:
  sidecar:
    container_name: dotlake_sidecar_instance
    image: parity/substrate-api-sidecar:latest
    read_only: true
    environment:
      - SAS_SUBSTRATE_URL=${WSS}
    ports:
      - "8080:8080"
    networks:
      - dotlake_network

  app:
    container_name: subindex-ingest
    image: python:3.9-slim
    working_dir: /app
    ports:
      - "8501:8501"
    environment:
      - RELAY_CHAIN=${RELAY_CHAIN}
      - CHAIN=${CHAIN}
      - WSS=${WSS}
      - DB_TYPE=${DB_TYPE}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_PROJECT=${DB_PROJECT}
      - CREDENTIALS_PATH=${CREDENTIALS_PATH}
      - DB_CREDENTIALS=${DB_CREDENTIALS}
      - DB_DATASET=${DB_DATASET}
      - DB_TABLE=${DB_TABLE}
      - INGEST_MODE=${INGEST_MODE}
      - START_BLOCK=${START_BLOCK} 
      - END_BLOCK=${END_BLOCK}
    volumes:
      - ../:/app
    command: >
      bash -c "
        pip install -r requirements.txt &&
        chmod +x start-ingest.sh &&
        ./start-ingest.sh
      "
    networks:
      - dotlake_network

  backend:
    container_name: dotlake-backend
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_TYPE=${DB_TYPE}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - DATABASE_PROJECT=${DB_PROJECT}
      - DATABASE_DATASET=${DB_DATASET}
      - DATABASE_TABLE=${DB_TABLE}
      - DATABASE_CRED_PATH=${CREDENTIALS_PATH}
      - CHAIN=${CHAIN}
      - RELAY_CHAIN=${RELAY_CHAIN}
    volumes:
      - ../../backend:/app
    depends_on:
      - postgres
    networks:
      - dotlake_network

  frontend:
    container_name: dotlake-frontend
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - CHAIN=${CHAIN}
    depends_on:
      - backend
    networks:
      - dotlake_network

  db-maintenance:
    container_name: dotlake-db-maintenance
    image: python:3.9-slim
    working_dir: /app
    environment:
      - DATABASE_TYPE=${DB_TYPE}
      - DATABASE_HOST=${DB_HOST}
      - DATABASE_PORT=${DB_PORT}
      - DATABASE_USER=${DB_USER}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - DATABASE_PROJECT=${DB_PROJECT}
      - DATABASE_DATASET=${DB_DATASET}
      - DATABASE_TABLE=${DB_TABLE}
      - DATABASE_CRED_PATH=${CREDENTIALS_PATH}
      - CHAIN=${CHAIN}
      - RELAY_CHAIN=${RELAY_CHAIN}
    volumes:
      - ../:/app
    command: >
      bash -c "
        pip install -r requirements.txt &&
        echo 'Waiting for database to be ready...' &&
        sleep 30 &&
        python db_maintenance.py
      "
    depends_on:
      - app
      - postgres
    networks:
      - dotlake_network

  superset:
    image: apache/superset
    container_name: superset
    ports:
      - "8088:8088"
    volumes:
      - ./superset_home:/app/superset_home
    environment:
      - SUPERSET_SECRET_KEY=your_secret_key_here
    user: "root"
    command: >
      bash -c "chown -R superset:superset /app/superset_home &&
               pip install psycopg2-binary &&
               superset db upgrade &&
               superset init &&
               superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger"
    networks:
      - dotlake_network

  # db-restore:
  #   container_name: dotlake-db-restore
  #   image: postgres:15
  #   environment:
  #     - POSTGRES_DB=${DB_NAME}
  #     - POSTGRES_USER=${DB_USER}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #     - DB_RESTORE_PATH=${DB_RESTORE_PATH}
  #   volumes:
  #     - postgres_data_v15:/var/lib/postgresql/data
  #     - ${DB_RESTORE_PATH:-/dev/null}:/dotlake_backup.dump:ro
  #   command: >
  #     bash -c "
  #       echo 'Waiting for postgres to be ready...' &&
  #       sleep 10 &&
  #       if [ -f /dotlake_backup.dump ] && [ ! -L /dotlake_backup.dump ]; then
  #         echo 'Restoring database from backup...' &&
  #         PGPASSWORD=${DB_PASSWORD} pg_restore -h postgres -U ${DB_USER} -d ${DB_NAME} -v /dotlake_backup.dump
  #       else
  #         echo 'No backup file found, skipping restore'
  #       fi
  #     "
  #   depends_on:
  #     - postgres
  #   networks:
  #     - dotlake_network

  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_v15:/var/lib/postgresql/data
    networks:
      - dotlake_network

volumes:
  postgres_data_v15:

networks:
  dotlake_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16